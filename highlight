#!/usr/bin/env php
<?php
/**
 * Simple* syntax highlighter for use on the command line. Uses ECMA-48
 * SGR sequences for color (man console_codes on a linux box.)
 * @reference http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf
 * @see Section 8.3.117
 *
 * @author Shawn Biddle (shawn@shawnbiddle.com)
 */


require_once(dirname(__FILE__) . '/autoload.php');

// Resources directory
define('RESC_DIR', dirname(__FILE__) . '/');
define('LIBDIR', 'tokenizers/');
define('DEFAULT_COLOR', 37);

if (!file_exists(RESC_DIR))
{
	die('[1;31mERROR:[0m RESC_DIR is not set or is invalid. Read the README for directions on setting it.'."\n");
}


$options  = getopt('i:s:lrhvt:o:e:');

if (empty($options) && count($argv) == 2)
{
	$options['i'] = $argv[1];
}

$filename = isset($options['i']) ? $options['i'] : NULL;
$syntax   = isset($options['s']) ? $options['s'] : NULL;
$lines    = !isset($options['l']);
$tabstop  = isset($options['t']) ? intval($options['t']) : 4;//NULL;
$html_out = isset($options['o']) ? $options['o'] : false;
$theme    = isset($options['e']) ? $options['e'] : NULL;
$reduce   = isset($options['r']);

if (isset($options['v']) && count($options['v']) >= 5)
{
	die("Sorry, this script doesn't moo.\n");
}

if (isset($options['h']))
{
	$thisfile = basename(__FILE__);
	echo <<<HELP
{$thisfile} -i <filename> [opts]
  -s <syntax>    Force a syntax (php, xml, css, html)
  -l             Show line numbers
  -h             It's what you're looking at!
  -t <#>         Set tab width
  -o <outfile>   HTML output
  -r             Try to group adjacent tokens in HTML output

HELP;
die;
}

if (!file_exists($filename) && $filename !== NULL)
{
	die($filename.": No such file or directory\n");
}
else if (is_dir($filename))
{
	die($filename.": Is a directory\n");
}

if ($filename !== NULL)
{
	$output = file($filename);
	$lines = $lines ? count($output) : $lines;
}
else
{
	$output = array();
	while ($line = fgets(STDIN)) $output[] = $line;
}

isset($output[0]) or die();
$line1  = $output[0];

$output = implode('', $output);

if ($syntax === NULL)
{
	if (strpos($line1, '#!/usr/bin/env') === 0)
	{
		$syntax = trim(@end(explode(' ', $line1)));
	}
	elseif (preg_match('~^#\!(/[a-z_0-9]+)+$~', $line1))
	{
		$syntax = trim(@end(explode('/', $line1)));
	}
}

$syntax = $syntax === NULL ? @end(explode('.', $filename)) : $syntax;

$SYNDIR = $theme === NULL ? 'syntax/' : ('themes/' . $theme .'/');

if (file_exists(RESC_DIR . $SYNDIR . 'syntax.map'))
{
	$syntax_extension_map = json_decode(trim(file_get_contents(RESC_DIR . $SYNDIR . 'syntax.map')), true);
	if ($syntax_extension_map !== NULL)
	{
		$syntax = isset($syntax_extension_map[$syntax]) ? $syntax_extension_map[$syntax] : $syntax;
	}
}


// No syntax file, just output without highlighting
if (!file_exists(RESC_DIR . $SYNDIR . $syntax . '.syn'))
{
	$syntax = 'default';
}

$class = Inflector::camelize(strtolower($syntax . '_lexer'));
if (!class_exists($class))
{
	die('You forgot to write the tokenizer function for syntax [' . $syntax . "]\n");
}

// hooray, lets tokenize and highlight our stuff
$synparser = new SynfileParser();
$synparser->setSynfileDir(RESC_DIR . $SYNDIR);

$lexer = new $class;

$color_map = $synparser->parse($syntax . '.syn', $html_out);

$options = array(
	'token_sets' => $lexer->tokenize($output),
	'color_map' => $color_map,
	'mode' => $html_out ? 'html' : 'cli',
);

if ($options['mode'] == 'html')
{
	$options['identifiers'] = CssHelper::getTokensetSelectors($color_map);
	$options['write_style'] = true;
	$options['lines'] = $lines;

	$syntax_style  = RESC_DIR . $SYNDIR . $syntax . '.css';
	$default_style = RESC_DIR . $SYNDIR . 'default.css';

	$custom_style = file_exists($syntax_style) ? $syntax_style : (file_exists($default_style) ? $default_style : false);
	if ($custom_style)
	{
		$options['style'] = file_get_contents($custom_style);
	}
	$options['reduce'] = $reduce;
}

$highlighter = new Highlighter($options);
$output = $highlighter->highlight();

// Non-html line numbering is done here
if ($lines || $tabstop !== NULL)
{
	$output = explode("\n", trim($output));
	$linewidth = strlen((string)(count($output) + 1));
	foreach ($output as $lineno => $line_content)
	{
		// No support for line numbers in html output yet
		if ($lines-- && !$html_out)
		{
			$ln_nbr  = "\033[48;5;" . $options['color_map']['H_NBG'] . 'm';
			$ln_nbr .= "\033[38;5;" . $options['color_map']['H_NFG'] . 'm';
			$ln_nbr .= str_pad($lineno + 1, $linewidth, " ", STR_PAD_LEFT) . '[0m ';
			$output[$lineno] = $ln_nbr . $line_content;
		}
		if ($tabstop !== NULL)
		{
			$output[$lineno] = str_replace("\t", str_repeat(' ', $tabstop), $output[$lineno]);
		}
	}
	$output = implode("\n", $output);
}

if ($options['mode'] == 'html')
{
	$fp = fopen($html_out, 'w+');
	fwrite($fp, $output);
	fclose($fp);
	exit;
}

echo $output;
